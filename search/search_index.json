{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Bryan's Blog \u6211\u662f\u4e00\u4e2aLinux kernel\u5de5\u7a0b\u5e08\uff0c\u8fd9\u4e2apage\u7528\u4e8e\u8bb0\u5f55\u5de5\u4f5c\u4e2d\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u4e00\u662f\u7528\u4e8e\u81ea\u6211\u63d0\u5347\uff0c\u4e8c\u662f\u5206\u4eab\u7ed9\u6709\u9700\u8981\u7684\u5176\u4ed6\u540c\u884c\u3002\u5e76\u5c06\u8bb0\u5f55\u751f\u6d3b\u4e2d\u7684\u4e00\u4e9b\u8da3\u4e8b\u548c\u611f\u60f3\u3002 \u8ba1\u5212\u540e\u7eed\u8981\u5b8c\u5584\u7684\u76f8\u5173\u529f\u80fd\u6a21\u5757\uff1a [ ] \u8bc4\u8bba\u529f\u80fd [ ] \u7ad9\u957f\u7edf\u8ba1","title":"Home"},{"location":"#welcome-to-bryans-blog","text":"\u6211\u662f\u4e00\u4e2aLinux kernel\u5de5\u7a0b\u5e08\uff0c\u8fd9\u4e2apage\u7528\u4e8e\u8bb0\u5f55\u5de5\u4f5c\u4e2d\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u4e00\u662f\u7528\u4e8e\u81ea\u6211\u63d0\u5347\uff0c\u4e8c\u662f\u5206\u4eab\u7ed9\u6709\u9700\u8981\u7684\u5176\u4ed6\u540c\u884c\u3002\u5e76\u5c06\u8bb0\u5f55\u751f\u6d3b\u4e2d\u7684\u4e00\u4e9b\u8da3\u4e8b\u548c\u611f\u60f3\u3002 \u8ba1\u5212\u540e\u7eed\u8981\u5b8c\u5584\u7684\u76f8\u5173\u529f\u80fd\u6a21\u5757\uff1a [ ] \u8bc4\u8bba\u529f\u80fd [ ] \u7ad9\u957f\u7edf\u8ba1","title":"Welcome to Bryan's Blog"},{"location":"2020-05-23-mkdocs/","text":"\u8bb0\u5f55\u4f7f\u7528mkdocs\u7684\u8fc7\u7a0b mkdocs\u76f8\u5173\u547d\u4ee4 For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \u76f8\u5173\u95ee\u9898\u8bb0\u5f55\uff1a \u6dfb\u52a0\u7b2c\u4e8c\u4e2aabout.md\u9875\u9762\u5931\u8d25 \u200b \u6309\u7167 [https://www.mkdocs.org/?#mkdocs] \u6587\u6863\u4e2d\u7684\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u9875\u9762\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528curl\u4e0b\u8f7dabout.md\u6587\u6863\u540e\uff0c\u70b9\u51fbabout\u56fe\u6807\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\u9875\u9762\uff1a \u539f\u56e0\u731c\u6d4b\u662f\u56e0\u4e3aabout.md\u4e2d\u5305\u542b\u4e86html\u7684\u76f8\u5173\u8bed\u6cd5\uff0c\u5982\u4e0b\uff1a \u5c06about.md\u4e2d\u7684\u5185\u5bb9\u5168\u90e8\u5220\u9664\uff0c\u4fee\u6539\u6210\u4e3a\u201cThis is a test page\u201d\u4e4b\u540e\uff0c\u9875\u9762\u5c31\u52a0\u8f7d\u51fa\u6765\u4e86\u3002 md\u4e2d\u63d2\u5165\u56fe\u7247\u540e\u9875\u9762\u65e0\u6cd5\u663e\u793a \u200b \u5728md\u4e2d\u63d2\u5165\u56fe\u7247\uff0cmd\u672c\u5730\u7f16\u8f91\u5668typora\u663e\u793a\u65e0\u95ee\u9898\uff0c\u4f46\u662fmkdocs\u65e0\u6cd5\u663e\u793a\uff0c\u539f\u56e0\u662f\u76f4\u63a5\u5728typora\u4e2d\u63d2\u5165\u622a\u56fe\uff0c\u5f15\u7528\u7684\u662f\u672c\u673aC\u76d8\u7684\u4e34\u65f6\u76ee\u5f55\uff0c\u5728mkdocs\u4e2d\u65e0\u6cd5\u663e\u793a\uff0c\u53c2\u8003\u5e2e\u52a9\u6587\u6863\uff1a[https://markdown-docs-zh.readthedocs.io/zh_CN/latest/user-guide/writing-your-docs/#_5] \u5e2e\u52a9\u6587\u6863\u94fe\u63a5 \u66f4\u591a\u5e2e\u52a9\u6587\u6863\u53ef\u4ee5\u53c2\u8003 [https://www.mkdocs.org/?#mkdocs] \u4e2d\u6587\u6587\u6863\u53ef\u4ee5\u53c2\u8003 [https://markdown-docs-zh.readthedocs.io/zh_CN/latest/],\u4f46\u662f\u8fd9\u4e2a\u6587\u6863\u6709\u70b9\u65e7\uff0c\u6700\u5178\u578b\u7684\u6bd4\u5982mkdocs.yml\u6587\u6863\u4e2d\u914d\u7f6e\u591a\u4e2a\u9875\u9762\u7684\u5e2e\u52a9\uff0c\u5176\u5b9e\u662f\u4f7f\u7528nav\uff0c\u4f46\u662f\u6587\u6863\u4e2d\u8fd8\u662f\u4f7f\u7528page\uff0c\u8fd9\u4e2a\u5751\u662f\u6211\u8e29\u8fc7\u4e4b\u540e\u91cd\u65b0\u4e0a\u7f51\u67e5\u627e\u624d\u53d1\u73b0\u7684","title":"Mkdocs\u65e5\u5fd7"},{"location":"2020-05-23-mkdocs/#mkdocs","text":"","title":"\u8bb0\u5f55\u4f7f\u7528mkdocs\u7684\u8fc7\u7a0b"},{"location":"2020-05-23-mkdocs/#mkdocs_1","text":"For full documentation visit mkdocs.org .","title":"mkdocs\u76f8\u5173\u547d\u4ee4"},{"location":"2020-05-23-mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"2020-05-23-mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"2020-05-23-mkdocs/#_1","text":"","title":"\u76f8\u5173\u95ee\u9898\u8bb0\u5f55\uff1a"},{"location":"2020-05-23-mkdocs/#aboutmd","text":"\u200b \u6309\u7167 [https://www.mkdocs.org/?#mkdocs] \u6587\u6863\u4e2d\u7684\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u9875\u9762\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528curl\u4e0b\u8f7dabout.md\u6587\u6863\u540e\uff0c\u70b9\u51fbabout\u56fe\u6807\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\u9875\u9762\uff1a \u539f\u56e0\u731c\u6d4b\u662f\u56e0\u4e3aabout.md\u4e2d\u5305\u542b\u4e86html\u7684\u76f8\u5173\u8bed\u6cd5\uff0c\u5982\u4e0b\uff1a \u5c06about.md\u4e2d\u7684\u5185\u5bb9\u5168\u90e8\u5220\u9664\uff0c\u4fee\u6539\u6210\u4e3a\u201cThis is a test page\u201d\u4e4b\u540e\uff0c\u9875\u9762\u5c31\u52a0\u8f7d\u51fa\u6765\u4e86\u3002","title":"\u6dfb\u52a0\u7b2c\u4e8c\u4e2aabout.md\u9875\u9762\u5931\u8d25"},{"location":"2020-05-23-mkdocs/#md","text":"\u200b \u5728md\u4e2d\u63d2\u5165\u56fe\u7247\uff0cmd\u672c\u5730\u7f16\u8f91\u5668typora\u663e\u793a\u65e0\u95ee\u9898\uff0c\u4f46\u662fmkdocs\u65e0\u6cd5\u663e\u793a\uff0c\u539f\u56e0\u662f\u76f4\u63a5\u5728typora\u4e2d\u63d2\u5165\u622a\u56fe\uff0c\u5f15\u7528\u7684\u662f\u672c\u673aC\u76d8\u7684\u4e34\u65f6\u76ee\u5f55\uff0c\u5728mkdocs\u4e2d\u65e0\u6cd5\u663e\u793a\uff0c\u53c2\u8003\u5e2e\u52a9\u6587\u6863\uff1a[https://markdown-docs-zh.readthedocs.io/zh_CN/latest/user-guide/writing-your-docs/#_5]","title":"md\u4e2d\u63d2\u5165\u56fe\u7247\u540e\u9875\u9762\u65e0\u6cd5\u663e\u793a"},{"location":"2020-05-23-mkdocs/#_2","text":"\u66f4\u591a\u5e2e\u52a9\u6587\u6863\u53ef\u4ee5\u53c2\u8003 [https://www.mkdocs.org/?#mkdocs] \u4e2d\u6587\u6587\u6863\u53ef\u4ee5\u53c2\u8003 [https://markdown-docs-zh.readthedocs.io/zh_CN/latest/],\u4f46\u662f\u8fd9\u4e2a\u6587\u6863\u6709\u70b9\u65e7\uff0c\u6700\u5178\u578b\u7684\u6bd4\u5982mkdocs.yml\u6587\u6863\u4e2d\u914d\u7f6e\u591a\u4e2a\u9875\u9762\u7684\u5e2e\u52a9\uff0c\u5176\u5b9e\u662f\u4f7f\u7528nav\uff0c\u4f46\u662f\u6587\u6863\u4e2d\u8fd8\u662f\u4f7f\u7528page\uff0c\u8fd9\u4e2a\u5751\u662f\u6211\u8e29\u8fc7\u4e4b\u540e\u91cd\u65b0\u4e0a\u7f51\u67e5\u627e\u624d\u53d1\u73b0\u7684","title":"\u5e2e\u52a9\u6587\u6863\u94fe\u63a5"},{"location":"2020-05-23-vfs/","text":"Linux kernel\u7684VFS\u6a21\u5757 \u8ba1\u5212\u5199\u4e00\u4e2a\u4e13\u9898\uff0c\u4e13\u95e8\u8bb0\u5f55linux kernel\u4e2dVFS\u76f8\u5173\u77e5\u8bc6\u548c\u5b66\u4e60\u70b9 \u5f15\u8a00 Linux\u4e2d\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6a21\u5757\uff0c\u5c31\u662f\u6587\u4ef6\u7cfb\u7edf\u3002\u800cLinux\u5e94\u7528\u573a\u666f\u5e7f\u9614\uff0c\u4ece\u5927\u91cf\u7684\u5d4c\u5165\u5f0f\u4f7f\u7528\u7684NAND Flash\u3001Norflash\u5230\u670d\u52a1\u5668\u4f7f\u7528\u7684\u78c1\u76d8\u7b49\u4e0d\u540c\u4ecb\u8d28\uff0c\u6240\u5bf9\u5e94\u7684\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5982YAFFS\u3001JFFS2\u3001EXT2/3/4\u7b49\u4f17\u591a\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4e0d\u540c\u7684\u786c\u4ef6\u4ecb\u8d28\uff0c\u62e5\u6709\u4e0d\u540c\u7684\u786c\u4ef6\u5c5e\u6027\u548c\u63a7\u5236\u65b9\u6cd5\u4ee5\u53ca\u6587\u4ef6\u7ec4\u7ec7\u5b58\u50a8\u65b9\u5f0f\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6587\u4ef6\u7cfb\u7edf\u5fc5\u7136\u4e5f\u662f\u4e0d\u540c\u7684\uff0c\u800c\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6807\u51c6\u7684open\u3001read\u3001write\u3001close\u7b49\u7cfb\u7edf\u8c03\u7528\uff0c\u8fd9\u4e48\u591a\u7684\u6587\u4ef6\u7cfb\u7edf\u662f\u5982\u4f55\u7ec4\u7ec7\u8d77\u6765\uff0c\u5bf9\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u5448\u73b0\u51fa\u6765\u4e00\u81f4\u6027\u7684\u5462\uff1f \u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4ece\u4e0b\u9762\u4e24\u4e2a\u65b9\u9762\u8003\u8651\uff1a \u5bf9\u4e8eLinux\u6765\u8bf4\uff0c\u4e00\u5207\u7686\u6587\u4ef6\u3002 \u4ece\u8f6f\u4ef6\u5de5\u7a0b\u548c\u8f6f\u4ef6\u54f2\u5b66\u6765\u8003\u8651\uff0c\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u52a0\u4e00\u5c42\u89e3\u51b3\u4e0d\u4e86\u3002 \u5bf9\u4e8eLinux\u6765\u8bf4\uff0c\u4e00\u5207\u7686\u6587\u4ef6\u3002 \u5bf9\u4e8eLinux\u6765\u8bf4\uff0c\u4e00\u5207\u7686\u6587\u4ef6\u3002\u5bf9\u4e8e\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u6240\u770b\u5230\u7684\uff0c\u4e5f\u53ea\u662f\u64cd\u4f5c\u6587\u4ef6\u3002\u6240\u4f7f\u7528\u7684\u7684\u90fd\u662f\u6807\u51c6\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5e95\u5c42\u7684\u6240\u6709\u6587\u4ef6\u7cfb\u7edf\u7684\u7ec6\u8282\u5bf9\u5176\u6765\u8bf4\u90fd\u662f\u9ed1\u76d2\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u65e2\u4e0d\u613f\u610f\u4e5f\u6ca1\u6709\u80fd\u529b\u770b\u5230\u4e0b\u5c42\u6587\u4ef6\u7cfb\u7edf\u6216\u8005\u786c\u4ef6\u7684\u5dee\u5f02\u3002\u60f3\u8c61\u4e00\u4e0b\uff1a\u4e16\u754c\u4e0a\u8fd9\u4e48\u591a\u7684\u624b\u673a\u5382\u5546\uff0c\u5982\u679c\u4e00\u4e2a\u4e0a\u5c42APP\u8981\u9002\u914d\u6240\u6709\u7684\u5b58\u50a8\u5668\u4ef6\u548c\u6784\u7b51\u5728\u5176\u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u90a3\u7edd\u5bf9\u662f\u4e00\u4e2a\u5929\u91cf\u7684\u5de5\u4f5c\u91cf\u3001\u5e76\u4e14\u4e5f\u662f\u8d28\u91cf\u548c\u8f6f\u4ef6\u5de5\u7a0b\u7ba1\u7406\u7684\u707e\u96be\u3002\u6240\u4ee5\uff0c\u5728Linux\u4e0a\uff0c\u8fd9\u4e9bAPP\u4e0d\u9700\u8981\u770b\u5230\u5e95\u5c42\u5dee\u5f02\uff0c\u53ea\u9700\u8981\u770b\u5230\u81ea\u5df1\u64cd\u4f5c\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u70b9\u5c31\u591f\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u4ea4\u7ed9Linux\u5185\u6838\u5427\uff0c\u4ed6\u4f1a\u641e\u5b9a\u8fd9\u4e2a\u95ee\u9898\u7684\u3002 \u4ece\u8f6f\u4ef6\u5de5\u7a0b\u548c\u8f6f\u4ef6\u54f2\u5b66\u6765\u8003\u8651\uff0c\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u52a0\u4e00\u5c42\u89e3\u51b3\u4e0d\u4e86\u3002 \u4e0a\u9762\u8bf4\u5230\u4e0a\u5c42APP\u641e\u4e0d\u5b9a\u7684\u4e8b\u60c5\uff0cLinux\u5185\u6838\u662f\u600e\u4e48\u641e\u5b9a\u7684\u5462\u3002\u8fd9\u5c31\u662f\u8457\u540d\u7684\u8f6f\u4ef6\u54f2\u5b66\uff1a\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u52a0\u4e00\u5c42\u89e3\u51b3\u4e0d\u4e86\u7684\u3002\u5982\u679c\u6709\uff0c\u90a3\u5c31\u518d\u52a0\u4e00\u5c42\u3002^_^ Linux\u5185\u6838\u52a0\u7684\u8fd9\u4e00\u5c42\u5c31\u662fVFS\u3002VFS\uff08Virtual File Ssystem\uff09\u4ece\u540d\u5b57\u4e0a\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5c31\u662f\u4e00\u4e2a\u865a\u62df\u7684\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u771f\u5b9e\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u5bf9\u4e0a\uff0c\u5c4f\u853d\u6240\u6709\u7684\u5e95\u5c42\u5dee\u5f02\uff0c\u63d0\u4f9b\u7edf\u4e00\u7684\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\uff0c\u5448\u73b0\u4e00\u81f4\u6027\uff1b\u5bf9\u4e0b\uff0c\u63d0\u4f9b\u4e00\u5957\u6807\u51c6\u6846\u67b6\u548c\u6ce8\u518c\u63a5\u53e3\uff0c\u8ba9\u5404\u79cd\u6587\u4ef6\u7cfb\u7edf\u6839\u636e\u6846\u67b6\u548c\u6807\u51c6\u8fdb\u884c\u5b9e\u73b0\uff0c\u5e76\u8ba9\u5404\u79cd\u6587\u4ef6\u7cfb\u7edf\u6ce8\u518c\u5404\u79cd\u64cd\u4f5c\u51fd\u6570\uff0c\u5b9e\u73b0\u771f\u6b63\u7684\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u3002\u603b\u800c\u8a00\u4e4b\uff0cVFS\u5c31\u662f\u5939\u5728\u5404\u79cd\u5b9e\u73b0\u7ec6\u8282\u548c\u6807\u51c6\u5316\u754c\u9762\u4e4b\u95f4\u7684\u5939\u5fc3\u5c42\uff0c\u771f\u6b63\u505a\u5230\u4e86\u5403\u7684\u662f\u8349\uff0c\u6324\u51fa\u6765\u7684\u662f\u5976\u3002 \u6587\u4ef6\u7cfb\u7edf\u603b\u4f53\u6846\u67b6 \u5982\u4e0a\u4ecb\u7ecd\uff0cVFS\u5c31\u662f\u5939\u5728\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u548c\u4e0b\u5c42\u4e0d\u540c\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u5939\u5fc3\u5c42\uff0c\u6574\u4f53\u7b80\u5355\u6846\u67b6\u5982\u4e0b\u56fe\uff1a \u76f8\u5173\u6587\u6863 \u6700\u6743\u5a01\u7684\u5c31\u662fKernel\u81ea\u5e26\u7684\u6587\u6863\u5566\u3002\u5728Documentation/filesystems\u76ee\u5f55\u4e0b\uff0c\u5c31\u6709vfs.txt\u5e2e\u52a9\u6587\u6863\u3002\u5bf9VFS\u7684\u4ecb\u7ecd\u5982\u4e0b\uff1a Introduction ============ The Virtual File System (also known as the Virtual Filesystem Switch) is the software layer in the kernel that provides the filesystem interface to userspace programs. It also provides an abstraction within the kernel which allows different filesystem implementations to coexist. VFS system calls open(2), stat(2), read(2), write(2), chmod(2) and so on are called from a process context. Filesystem locking is described in the document Documentation/filesystems/Locking. \u76f8\u5173\u6570\u636e\u7ed3\u6784 struct file_system_type \u7ed3\u6784\u4f53\u5b9a\u4e49\u5728include/linux/fs.h\u5934\u6587\u4ef6\u4e2d\uff0c\u8be6\u7ec6\u5b9a\u4e49\uff1a struct file_system_type { const char *name; ----- \u6587\u4ef6\u7cfb\u7edf\u540d\u5b57 int fs_flags; ----- TODO:\u6807\u5fd7\u4f4d\u3001\u6682\u65f6\u4e0d\u77e5\u9053\u5e72\u5565\u7684\uff0c\u540e\u7eed\u8865\u4e0a #define FS_REQUIRES_DEV 1 #define FS_BINARY_MOUNTDATA 2 #define FS_HAS_SUBTYPE 4 #define FS_USERNS_MOUNT 8 /* Can be mounted by userns root */ #define FS_DISALLOW_NOTIFY_PERM 16 /* Disable fanotify permission events */ #define FS_RENAME_DOES_D_MOVE 32768 /* FS will handle d_move() during rename() internally. */ int (*init_fs_context)(struct fs_context *); const struct fs_parameter_spec *parameters; struct dentry *(*mount) (struct file_system_type *, int, const char *, void *); ----- \u5177\u4f53\u6587\u4ef6\u7cfb\u7edf\u7684\u6302\u8f7d\u51fd\u6570\u94a9\u5b50 void (*kill_sb) (struct super_block *); ---- TODO\uff1a\u5e94\u8be5\u662f\u5378\u8f7d\u51fd\u6570\u94a9\u5b50\uff1f struct module *owner; struct file_system_type * next; ----\u5355\u94fe\u8868\uff0c\u7ba1\u7406\u6240\u6709\u7684\u6587\u4ef6\u7cfb\u7edf struct hlist_head fs_supers; ----TODO:\u4e0d\u77e5\u9053\u5e72\u5565\u7684 struct lock_class_key s_lock_key; ---- TODO: \u8fd9\u4e00\u5768\u4e5f\u4e0d\u77e5\u9053\u5e72\u5565\u7684 struct lock_class_key s_umount_key; struct lock_class_key s_vfs_rename_key; struct lock_class_key s_writers_key[SB_FREEZE_LEVELS]; struct lock_class_key i_lock_key; struct lock_class_key i_mutex_key; struct lock_class_key i_mutex_dir_key; }; Linux\u63d0\u4f9b\u4e86/proc/filesystems\u63a5\u53e3\uff0c\u7528\u4e8e\u67e5\u770b\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u6ce8\u518c\u7684\u6240\u6709\u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u5728\u6211\u7684CentOS\u865a\u62df\u673a\u4e0a\uff0c\u53ef\u4ee5\u770b\u5230\u6ce8\u518c\u4e86\u5982\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf: \u6709\u4e86file_system_type\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u770b\u770b\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u600e\u4e48\u6dfb\u52a0\u5230\u5185\u6838\u4e2d\u7684\u3002 int register_filesystem(struct file_system_type * fs) /** * register_filesystem - register a new filesystem * @fs: the file system structure * * Adds the file system passed to the list of file systems the kernel * is aware of for mount and other syscalls. Returns 0 on success, * or a negative errno code on an error. * * The &struct file_system_type that is passed is linked into the kernel * structures and must not be freed until the file system has been * unregistered. */ int register_filesystem(struct file_system_type * fs) { int res = 0; struct file_system_type ** p; BUG_ON(strchr(fs->name, '.')); if (fs->next) return -EBUSY; write_lock(&file_systems_lock); p = find_filesystem(fs->name, strlen(fs->name)); if (*p) res = -EBUSY; else *p = fs; write_unlock(&file_systems_lock); return res; } EXPORT_SYMBOL(register_filesystem); \u51fd\u6570\u5b9a\u4e49\u5728fs/filesystem.c\u6587\u4ef6\u4e2d\uff0c\u4ee3\u7801\u5f88\u7b80\u5355, \u6bd4\u5982\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u5b57\u53ebbryan\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u9996\u5148\u5bf9\u5165\u53c2\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u8fdb\u884c\u5408\u6cd5\u6027\u6821\u9a8c\uff0c\u7136\u540e\u67e5\u627e\u7cfb\u7edf\u4e2dbryan\u8fd9\u4e2a\u540d\u5b57\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u5982\u679c\u5df2\u7ecf\u6ce8\u518c\u8fc7\u4e86\uff0c\u5c31\u4e0d\u9700\u8981\u4e5f\u4e0d\u53ef\u80fd\u518d\u6ce8\u518c\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de-EBUSY\uff0c\u53cd\u4e4b\u5c06bryan\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6dfb\u52a0\u5230\u6587\u4ef6\u7cfb\u7edf\u94fe\u8868\u4e0a\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u5c31\u6210\u529f\u4e86\u3002 int unregister_filesystem(struct file_system_type * fs) /** * unregister_filesystem - unregister a file system * @fs: filesystem to unregister * * Remove a file system that was previously successfully registered * with the kernel. An error is returned if the file system is not found. * Zero is returned on a success. * * Once this function has returned the &struct file_system_type structure * may be freed or reused. */ int unregister_filesystem(struct file_system_type * fs) { struct file_system_type ** tmp; write_lock(&file_systems_lock); tmp = &file_systems; while (*tmp) { if (fs == *tmp) { *tmp = fs->next; fs->next = NULL; write_unlock(&file_systems_lock); synchronize_rcu(); return 0; } tmp = &(*tmp)->next; } write_unlock(&file_systems_lock); return -EINVAL; } EXPORT_SYMBOL(unregister_filesystem); \u4e0eregister_filesystem\u76f8\u5bf9\u5e94\uff0c\u5c31\u662f\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u4ece\u5df2\u7ecf\u6ce8\u518c\u7684\u5217\u8868\u4e2d\u5220\u9664\uff0c\u5185\u6838\u65e0\u6cd5\u518d\u67e5\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u5c31\u81ea\u7136\u7684\u4ece\u5185\u6838\u4e2d\u5378\u8f7d\u4e86\u3002 \u4ece\u4e0a\u8ff0\u7684\u4e24\u4e2a\u51fd\u6570\u6765\u770b\uff0c\u8fd8\u6709\u5982\u4e0b\u51e0\u4e2a\u70b9\u53ef\u4ee5\u5173\u6ce8\u4e00\u4e0b\uff1a find_filesystem\u51fd\u6570 static struct file_system_type **find_filesystem(const char *name, unsigned len) { struct file_system_type **p; for (p = &file_systems; *p; p = &(*p)->next) if (strncmp((*p)->name, name, len) == 0 && !(*p)->name[len]) break; return p; } \u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u904d\u5386\u7cfb\u7edf\u4e2d\u7684\u5df2\u7ecf\u6ce8\u518c\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u6839\u636e\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u540d\u5b57\u6765\u505a\u5224\u65ad\uff0c\u786e\u5b9a\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u3002\u8fd9\u4e2a\u51fd\u6570\u4e5f\u5b9a\u4e49\u5728fs/filesystems.c\u6587\u4ef6\u4e2d\uff1b file_systems\u53d8\u91cf static struct file_system_type *file_systems; \u8fd9\u662f\u4e00\u4e2a\u5168\u5c40static\u6307\u9488\u53d8\u91cf\uff0c\u6307\u5411\u7684\u5c31\u662f\u6ce8\u518c\u5230\u7cfb\u7edf\u4e2d\u7684\u7b2c\u4e00\u4e2afile_system_type\u5bf9\u8c61\uff0c\u7136\u540e\u6bcf\u4e2a\u3002\u5176\u5b9e\u4e0a\u9762\u7684register_filesystem\u548cunregister_filesystem\u51fd\u6570\uff0c\u90fd\u662f\u9488\u5bf9\u8fd9\u4e2afile_systems\u6307\u5411\u7684\u94fe\u8868\u8fdb\u884c\u64cd\u4f5c\u7684\u3002register_filesystem\u5c31\u662f\u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u94fe\u8868\u4e2d\uff0cunregister_filesystem\u5c31\u662f\u5c06\u5bf9\u8c61\u4ece\u94fe\u8868\u4e2d\u6458\u9664\u3002 register_filesystem\u548cunregister_filesystem\u7684\u601d\u8003 \u867d\u7136\u4e0a\u9762\u8bf4\u7684\u6ce8\u518c\u548c\u89e3\u6ce8\u518c\u8fc7\u7a0b\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u8fd8\u662f\u6709\u4e00\u4e9b\u4e8b\u60c5\u503c\u5f97\u6ce8\u610f\u548c\u601d\u8003\uff1a 1) file_systems_lock\u8fd9\u628a\u9501\u662f\u8bfb\u5199\u9501\uff0c\u5c31\u662f\u53ea\u6709\u6ce8\u518c\u548c\u89e3\u6ce8\u518c\u7684\u65f6\u5019\u53bb\u5199\u94fe\u8868\uff0c\u5176\u4f59\u7684\u573a\u666f\u90fd\u662f\u8bfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u8bfb\u5199\u9501\u5c3d\u91cf\u63d0\u9ad8\u7cfb\u7edf\u54cd\u5e94\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a static DEFINE_RWLOCK(file_systems_lock); 2) register_filesystem\u65f6\u4f7f\u7528\u4e86find_filesystem\u67e5\u627e\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u6ce8\u518c\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u4f46unregister_filesystem\u65f6\u5e76\u6ca1\u6709\u4f7f\u7528find_filesystem\u53bb\u67e5\u627e\u5df2\u7ecf\u6ce8\u518c\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u800c\u662f\u76f4\u63a5\u904d\u5386\u3002\u5e94\u8be5\u53ef\u4ee5\u4f7f\u7528find_filesystem\u6539\u5199\u3002\u66f4\u6df1\u5c42\u6b21\uff0c\u56e0\u4e3a\u6ce8\u518c\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fname\u4f5c\u4e3a\u5224\u65ad\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u7684\u552f\u4e00\u6027\uff0c\u90a3\u4e48\u5728\u89e3\u6ce8\u518c\u7684\u65f6\u5019\u4f7f\u7528find_filesystem\u53bb\u67e5\u627e\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u4e5f\u662f\u552f\u4e00\u7684\uff0c\u903b\u8f91\u4e0a\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u4f46\u662f\u8981\u8003\u8651\u6ce8\u518c\u662f\u5728\u94fe\u8868\u7ed3\u5c3e\u6dfb\u52a0\u5bf9\u8c61\uff0c\u800c\u89e3\u6ce8\u518c\u6709\u53ef\u80fd\u5728\u94fe\u8868\u4e2d\u90e8\uff0c\u4f7f\u7528find_filesystem\u51fd\u6570\u903b\u8f91\u4f1a\u66f4\u590d\u6742\u3002 3) \u5728\u6ce8\u518c\u7684\u65f6\u5019\u4f1a\u5224\u65adnext\u6307\u9488\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u7684\u8bdd\u4f1a\u8fd4\u56de\u5931\u8d25\uff0c\u8fd9\u91cc\u7684\u8003\u8651\u5f88\u91cd\u8981\uff1a\u9632\u6b62\u4e86\u6ce8\u518c\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u7684\u65f6\u5019\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u968f\u610f\u4e0d\u786e\u5b9a\u6027\uff0c\u5373\u4e0d\u786e\u5b9anext\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u7cfb\u7edf\u4e2d\u6ce8\u518c\u7684\u6240\u6709\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u90fd\u662f\u9760\u8fd9\u4e2a\u94fe\u8868\u6765\u7ef4\u62a4\uff0c\u6240\u4ee5next\u7edd\u5bf9\u4e0d\u53ef\u4ee5\u51fa\u95ee\u9898\uff1b\u6240\u4ee5\u89e3\u6ce8\u518c\u4e4b\u540e\uff0c\u4e5f\u4f1a\u5c06next\u6307\u9488\u8d4b\u503c\u4e3aNULL\uff1b 4) unregister_filesystem\u4e4b\u540e\u4f1a\u8c03\u7528synchronize_rcu\uff0c\u8fd9\u4e2arcu\u540c\u6b65\u5728\u8fd9\u4e2a\u5730\u65b9\u663e\u5f97\u975e\u5e38\u7a81\u5140\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f \u8fd8\u662f\u67e5\u770b\u6e90\u7801\u63d0\u4ea4\u8bb0\u5f55\u3002\u6700\u5f00\u59cb\u7684\u63d0\u4ea4\u662fNick Piggin\u572811\u5e74\u572831e6b01f4183ff419a6d1f86177cbf4662347cec\u8fd9\u4e2acommiter\u4e2d\u6dfb\u52a0\u7684\uff0c\u7136\u540e\u572811\u5e74\u7531Milton Milller\u5728fff3e5ade4455a4b42a19c95dd7a167a3cb7956a\u8fd9\u4e2a\u63d0\u4ea4\u4e2d\u5c06synchronize_rcu\u4ece\u5faa\u73af\u5916\u6dfb\u52a0\u5230\u5faa\u73af\u4e2d\u3002\u5177\u4f53\u7684\u539f\u56e0\u5982\u4e0b\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e24\u4e2acommit\u7684\u6ce8\u91ca\uff0c\u7b80\u800c\u8a00\u4e4b\u5982\u4e0b\uff1a 31e6b01f4183ff419a6d1f86177cbf4662347cec: \u5728\u89e3\u6ce8\u518c\u7684\u65f6\u5019\u4ecd\u53ef\u7ee7\u7eed\u8bbf\u95eed_ops\u548ci_ops\uff1b fff3e5ade4455a4b42a19c95dd7a167a3cb7956a: \u5728\u5faa\u73af\u5916\u4e0d\u5b89\u5168\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u5faa\u73af\u5185\u90e8\u3002\u8fd9\u4e2a\u70b9\u8fd8\u4e0d\u61c2\uff0c\u7ed9\u81ea\u5df1\u7559\u4e2a\u4f5c\u4e1a\u5427^_^ struct file_operations","title":"VFS"},{"location":"2020-05-23-vfs/#linux-kernelvfs","text":"\u8ba1\u5212\u5199\u4e00\u4e2a\u4e13\u9898\uff0c\u4e13\u95e8\u8bb0\u5f55linux kernel\u4e2dVFS\u76f8\u5173\u77e5\u8bc6\u548c\u5b66\u4e60\u70b9","title":"Linux kernel\u7684VFS\u6a21\u5757"},{"location":"2020-05-23-vfs/#_1","text":"Linux\u4e2d\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6a21\u5757\uff0c\u5c31\u662f\u6587\u4ef6\u7cfb\u7edf\u3002\u800cLinux\u5e94\u7528\u573a\u666f\u5e7f\u9614\uff0c\u4ece\u5927\u91cf\u7684\u5d4c\u5165\u5f0f\u4f7f\u7528\u7684NAND Flash\u3001Norflash\u5230\u670d\u52a1\u5668\u4f7f\u7528\u7684\u78c1\u76d8\u7b49\u4e0d\u540c\u4ecb\u8d28\uff0c\u6240\u5bf9\u5e94\u7684\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5982YAFFS\u3001JFFS2\u3001EXT2/3/4\u7b49\u4f17\u591a\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4e0d\u540c\u7684\u786c\u4ef6\u4ecb\u8d28\uff0c\u62e5\u6709\u4e0d\u540c\u7684\u786c\u4ef6\u5c5e\u6027\u548c\u63a7\u5236\u65b9\u6cd5\u4ee5\u53ca\u6587\u4ef6\u7ec4\u7ec7\u5b58\u50a8\u65b9\u5f0f\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6587\u4ef6\u7cfb\u7edf\u5fc5\u7136\u4e5f\u662f\u4e0d\u540c\u7684\uff0c\u800c\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u6807\u51c6\u7684open\u3001read\u3001write\u3001close\u7b49\u7cfb\u7edf\u8c03\u7528\uff0c\u8fd9\u4e48\u591a\u7684\u6587\u4ef6\u7cfb\u7edf\u662f\u5982\u4f55\u7ec4\u7ec7\u8d77\u6765\uff0c\u5bf9\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u5448\u73b0\u51fa\u6765\u4e00\u81f4\u6027\u7684\u5462\uff1f \u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4ece\u4e0b\u9762\u4e24\u4e2a\u65b9\u9762\u8003\u8651\uff1a \u5bf9\u4e8eLinux\u6765\u8bf4\uff0c\u4e00\u5207\u7686\u6587\u4ef6\u3002 \u4ece\u8f6f\u4ef6\u5de5\u7a0b\u548c\u8f6f\u4ef6\u54f2\u5b66\u6765\u8003\u8651\uff0c\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u52a0\u4e00\u5c42\u89e3\u51b3\u4e0d\u4e86\u3002 \u5bf9\u4e8eLinux\u6765\u8bf4\uff0c\u4e00\u5207\u7686\u6587\u4ef6\u3002 \u5bf9\u4e8eLinux\u6765\u8bf4\uff0c\u4e00\u5207\u7686\u6587\u4ef6\u3002\u5bf9\u4e8e\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u6240\u770b\u5230\u7684\uff0c\u4e5f\u53ea\u662f\u64cd\u4f5c\u6587\u4ef6\u3002\u6240\u4f7f\u7528\u7684\u7684\u90fd\u662f\u6807\u51c6\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5e95\u5c42\u7684\u6240\u6709\u6587\u4ef6\u7cfb\u7edf\u7684\u7ec6\u8282\u5bf9\u5176\u6765\u8bf4\u90fd\u662f\u9ed1\u76d2\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u65e2\u4e0d\u613f\u610f\u4e5f\u6ca1\u6709\u80fd\u529b\u770b\u5230\u4e0b\u5c42\u6587\u4ef6\u7cfb\u7edf\u6216\u8005\u786c\u4ef6\u7684\u5dee\u5f02\u3002\u60f3\u8c61\u4e00\u4e0b\uff1a\u4e16\u754c\u4e0a\u8fd9\u4e48\u591a\u7684\u624b\u673a\u5382\u5546\uff0c\u5982\u679c\u4e00\u4e2a\u4e0a\u5c42APP\u8981\u9002\u914d\u6240\u6709\u7684\u5b58\u50a8\u5668\u4ef6\u548c\u6784\u7b51\u5728\u5176\u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u90a3\u7edd\u5bf9\u662f\u4e00\u4e2a\u5929\u91cf\u7684\u5de5\u4f5c\u91cf\u3001\u5e76\u4e14\u4e5f\u662f\u8d28\u91cf\u548c\u8f6f\u4ef6\u5de5\u7a0b\u7ba1\u7406\u7684\u707e\u96be\u3002\u6240\u4ee5\uff0c\u5728Linux\u4e0a\uff0c\u8fd9\u4e9bAPP\u4e0d\u9700\u8981\u770b\u5230\u5e95\u5c42\u5dee\u5f02\uff0c\u53ea\u9700\u8981\u770b\u5230\u81ea\u5df1\u64cd\u4f5c\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u70b9\u5c31\u591f\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u4ea4\u7ed9Linux\u5185\u6838\u5427\uff0c\u4ed6\u4f1a\u641e\u5b9a\u8fd9\u4e2a\u95ee\u9898\u7684\u3002 \u4ece\u8f6f\u4ef6\u5de5\u7a0b\u548c\u8f6f\u4ef6\u54f2\u5b66\u6765\u8003\u8651\uff0c\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u52a0\u4e00\u5c42\u89e3\u51b3\u4e0d\u4e86\u3002 \u4e0a\u9762\u8bf4\u5230\u4e0a\u5c42APP\u641e\u4e0d\u5b9a\u7684\u4e8b\u60c5\uff0cLinux\u5185\u6838\u662f\u600e\u4e48\u641e\u5b9a\u7684\u5462\u3002\u8fd9\u5c31\u662f\u8457\u540d\u7684\u8f6f\u4ef6\u54f2\u5b66\uff1a\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\u662f\u52a0\u4e00\u5c42\u89e3\u51b3\u4e0d\u4e86\u7684\u3002\u5982\u679c\u6709\uff0c\u90a3\u5c31\u518d\u52a0\u4e00\u5c42\u3002^_^ Linux\u5185\u6838\u52a0\u7684\u8fd9\u4e00\u5c42\u5c31\u662fVFS\u3002VFS\uff08Virtual File Ssystem\uff09\u4ece\u540d\u5b57\u4e0a\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5c31\u662f\u4e00\u4e2a\u865a\u62df\u7684\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u771f\u5b9e\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u5bf9\u4e0a\uff0c\u5c4f\u853d\u6240\u6709\u7684\u5e95\u5c42\u5dee\u5f02\uff0c\u63d0\u4f9b\u7edf\u4e00\u7684\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\uff0c\u5448\u73b0\u4e00\u81f4\u6027\uff1b\u5bf9\u4e0b\uff0c\u63d0\u4f9b\u4e00\u5957\u6807\u51c6\u6846\u67b6\u548c\u6ce8\u518c\u63a5\u53e3\uff0c\u8ba9\u5404\u79cd\u6587\u4ef6\u7cfb\u7edf\u6839\u636e\u6846\u67b6\u548c\u6807\u51c6\u8fdb\u884c\u5b9e\u73b0\uff0c\u5e76\u8ba9\u5404\u79cd\u6587\u4ef6\u7cfb\u7edf\u6ce8\u518c\u5404\u79cd\u64cd\u4f5c\u51fd\u6570\uff0c\u5b9e\u73b0\u771f\u6b63\u7684\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u3002\u603b\u800c\u8a00\u4e4b\uff0cVFS\u5c31\u662f\u5939\u5728\u5404\u79cd\u5b9e\u73b0\u7ec6\u8282\u548c\u6807\u51c6\u5316\u754c\u9762\u4e4b\u95f4\u7684\u5939\u5fc3\u5c42\uff0c\u771f\u6b63\u505a\u5230\u4e86\u5403\u7684\u662f\u8349\uff0c\u6324\u51fa\u6765\u7684\u662f\u5976\u3002","title":"\u5f15\u8a00"},{"location":"2020-05-23-vfs/#_2","text":"\u5982\u4e0a\u4ecb\u7ecd\uff0cVFS\u5c31\u662f\u5939\u5728\u4e0a\u5c42\u5e94\u7528\u7a0b\u5e8f\u548c\u4e0b\u5c42\u4e0d\u540c\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u5939\u5fc3\u5c42\uff0c\u6574\u4f53\u7b80\u5355\u6846\u67b6\u5982\u4e0b\u56fe\uff1a","title":"\u6587\u4ef6\u7cfb\u7edf\u603b\u4f53\u6846\u67b6"},{"location":"2020-05-23-vfs/#_3","text":"\u6700\u6743\u5a01\u7684\u5c31\u662fKernel\u81ea\u5e26\u7684\u6587\u6863\u5566\u3002\u5728Documentation/filesystems\u76ee\u5f55\u4e0b\uff0c\u5c31\u6709vfs.txt\u5e2e\u52a9\u6587\u6863\u3002\u5bf9VFS\u7684\u4ecb\u7ecd\u5982\u4e0b\uff1a Introduction ============ The Virtual File System (also known as the Virtual Filesystem Switch) is the software layer in the kernel that provides the filesystem interface to userspace programs. It also provides an abstraction within the kernel which allows different filesystem implementations to coexist. VFS system calls open(2), stat(2), read(2), write(2), chmod(2) and so on are called from a process context. Filesystem locking is described in the document Documentation/filesystems/Locking.","title":"\u76f8\u5173\u6587\u6863"},{"location":"2020-05-23-vfs/#_4","text":"struct file_system_type \u7ed3\u6784\u4f53\u5b9a\u4e49\u5728include/linux/fs.h\u5934\u6587\u4ef6\u4e2d\uff0c\u8be6\u7ec6\u5b9a\u4e49\uff1a struct file_system_type { const char *name; ----- \u6587\u4ef6\u7cfb\u7edf\u540d\u5b57 int fs_flags; ----- TODO:\u6807\u5fd7\u4f4d\u3001\u6682\u65f6\u4e0d\u77e5\u9053\u5e72\u5565\u7684\uff0c\u540e\u7eed\u8865\u4e0a #define FS_REQUIRES_DEV 1 #define FS_BINARY_MOUNTDATA 2 #define FS_HAS_SUBTYPE 4 #define FS_USERNS_MOUNT 8 /* Can be mounted by userns root */ #define FS_DISALLOW_NOTIFY_PERM 16 /* Disable fanotify permission events */ #define FS_RENAME_DOES_D_MOVE 32768 /* FS will handle d_move() during rename() internally. */ int (*init_fs_context)(struct fs_context *); const struct fs_parameter_spec *parameters; struct dentry *(*mount) (struct file_system_type *, int, const char *, void *); ----- \u5177\u4f53\u6587\u4ef6\u7cfb\u7edf\u7684\u6302\u8f7d\u51fd\u6570\u94a9\u5b50 void (*kill_sb) (struct super_block *); ---- TODO\uff1a\u5e94\u8be5\u662f\u5378\u8f7d\u51fd\u6570\u94a9\u5b50\uff1f struct module *owner; struct file_system_type * next; ----\u5355\u94fe\u8868\uff0c\u7ba1\u7406\u6240\u6709\u7684\u6587\u4ef6\u7cfb\u7edf struct hlist_head fs_supers; ----TODO:\u4e0d\u77e5\u9053\u5e72\u5565\u7684 struct lock_class_key s_lock_key; ---- TODO: \u8fd9\u4e00\u5768\u4e5f\u4e0d\u77e5\u9053\u5e72\u5565\u7684 struct lock_class_key s_umount_key; struct lock_class_key s_vfs_rename_key; struct lock_class_key s_writers_key[SB_FREEZE_LEVELS]; struct lock_class_key i_lock_key; struct lock_class_key i_mutex_key; struct lock_class_key i_mutex_dir_key; }; Linux\u63d0\u4f9b\u4e86/proc/filesystems\u63a5\u53e3\uff0c\u7528\u4e8e\u67e5\u770b\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u6ce8\u518c\u7684\u6240\u6709\u7c7b\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u5728\u6211\u7684CentOS\u865a\u62df\u673a\u4e0a\uff0c\u53ef\u4ee5\u770b\u5230\u6ce8\u518c\u4e86\u5982\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf: \u6709\u4e86file_system_type\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u770b\u770b\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u600e\u4e48\u6dfb\u52a0\u5230\u5185\u6838\u4e2d\u7684\u3002 int register_filesystem(struct file_system_type * fs) /** * register_filesystem - register a new filesystem * @fs: the file system structure * * Adds the file system passed to the list of file systems the kernel * is aware of for mount and other syscalls. Returns 0 on success, * or a negative errno code on an error. * * The &struct file_system_type that is passed is linked into the kernel * structures and must not be freed until the file system has been * unregistered. */ int register_filesystem(struct file_system_type * fs) { int res = 0; struct file_system_type ** p; BUG_ON(strchr(fs->name, '.')); if (fs->next) return -EBUSY; write_lock(&file_systems_lock); p = find_filesystem(fs->name, strlen(fs->name)); if (*p) res = -EBUSY; else *p = fs; write_unlock(&file_systems_lock); return res; } EXPORT_SYMBOL(register_filesystem); \u51fd\u6570\u5b9a\u4e49\u5728fs/filesystem.c\u6587\u4ef6\u4e2d\uff0c\u4ee3\u7801\u5f88\u7b80\u5355, \u6bd4\u5982\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u5b57\u53ebbryan\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u9996\u5148\u5bf9\u5165\u53c2\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u8fdb\u884c\u5408\u6cd5\u6027\u6821\u9a8c\uff0c\u7136\u540e\u67e5\u627e\u7cfb\u7edf\u4e2dbryan\u8fd9\u4e2a\u540d\u5b57\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\uff0c\u5982\u679c\u5df2\u7ecf\u6ce8\u518c\u8fc7\u4e86\uff0c\u5c31\u4e0d\u9700\u8981\u4e5f\u4e0d\u53ef\u80fd\u518d\u6ce8\u518c\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de-EBUSY\uff0c\u53cd\u4e4b\u5c06bryan\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6dfb\u52a0\u5230\u6587\u4ef6\u7cfb\u7edf\u94fe\u8868\u4e0a\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u5c31\u6210\u529f\u4e86\u3002 int unregister_filesystem(struct file_system_type * fs) /** * unregister_filesystem - unregister a file system * @fs: filesystem to unregister * * Remove a file system that was previously successfully registered * with the kernel. An error is returned if the file system is not found. * Zero is returned on a success. * * Once this function has returned the &struct file_system_type structure * may be freed or reused. */ int unregister_filesystem(struct file_system_type * fs) { struct file_system_type ** tmp; write_lock(&file_systems_lock); tmp = &file_systems; while (*tmp) { if (fs == *tmp) { *tmp = fs->next; fs->next = NULL; write_unlock(&file_systems_lock); synchronize_rcu(); return 0; } tmp = &(*tmp)->next; } write_unlock(&file_systems_lock); return -EINVAL; } EXPORT_SYMBOL(unregister_filesystem); \u4e0eregister_filesystem\u76f8\u5bf9\u5e94\uff0c\u5c31\u662f\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u4ece\u5df2\u7ecf\u6ce8\u518c\u7684\u5217\u8868\u4e2d\u5220\u9664\uff0c\u5185\u6838\u65e0\u6cd5\u518d\u67e5\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u5c31\u81ea\u7136\u7684\u4ece\u5185\u6838\u4e2d\u5378\u8f7d\u4e86\u3002 \u4ece\u4e0a\u8ff0\u7684\u4e24\u4e2a\u51fd\u6570\u6765\u770b\uff0c\u8fd8\u6709\u5982\u4e0b\u51e0\u4e2a\u70b9\u53ef\u4ee5\u5173\u6ce8\u4e00\u4e0b\uff1a find_filesystem\u51fd\u6570 static struct file_system_type **find_filesystem(const char *name, unsigned len) { struct file_system_type **p; for (p = &file_systems; *p; p = &(*p)->next) if (strncmp((*p)->name, name, len) == 0 && !(*p)->name[len]) break; return p; } \u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u904d\u5386\u7cfb\u7edf\u4e2d\u7684\u5df2\u7ecf\u6ce8\u518c\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u6839\u636e\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u540d\u5b57\u6765\u505a\u5224\u65ad\uff0c\u786e\u5b9a\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u3002\u8fd9\u4e2a\u51fd\u6570\u4e5f\u5b9a\u4e49\u5728fs/filesystems.c\u6587\u4ef6\u4e2d\uff1b file_systems\u53d8\u91cf static struct file_system_type *file_systems; \u8fd9\u662f\u4e00\u4e2a\u5168\u5c40static\u6307\u9488\u53d8\u91cf\uff0c\u6307\u5411\u7684\u5c31\u662f\u6ce8\u518c\u5230\u7cfb\u7edf\u4e2d\u7684\u7b2c\u4e00\u4e2afile_system_type\u5bf9\u8c61\uff0c\u7136\u540e\u6bcf\u4e2a\u3002\u5176\u5b9e\u4e0a\u9762\u7684register_filesystem\u548cunregister_filesystem\u51fd\u6570\uff0c\u90fd\u662f\u9488\u5bf9\u8fd9\u4e2afile_systems\u6307\u5411\u7684\u94fe\u8868\u8fdb\u884c\u64cd\u4f5c\u7684\u3002register_filesystem\u5c31\u662f\u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u94fe\u8868\u4e2d\uff0cunregister_filesystem\u5c31\u662f\u5c06\u5bf9\u8c61\u4ece\u94fe\u8868\u4e2d\u6458\u9664\u3002 register_filesystem\u548cunregister_filesystem\u7684\u601d\u8003 \u867d\u7136\u4e0a\u9762\u8bf4\u7684\u6ce8\u518c\u548c\u89e3\u6ce8\u518c\u8fc7\u7a0b\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u8fd8\u662f\u6709\u4e00\u4e9b\u4e8b\u60c5\u503c\u5f97\u6ce8\u610f\u548c\u601d\u8003\uff1a 1) file_systems_lock\u8fd9\u628a\u9501\u662f\u8bfb\u5199\u9501\uff0c\u5c31\u662f\u53ea\u6709\u6ce8\u518c\u548c\u89e3\u6ce8\u518c\u7684\u65f6\u5019\u53bb\u5199\u94fe\u8868\uff0c\u5176\u4f59\u7684\u573a\u666f\u90fd\u662f\u8bfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u8bfb\u5199\u9501\u5c3d\u91cf\u63d0\u9ad8\u7cfb\u7edf\u54cd\u5e94\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a static DEFINE_RWLOCK(file_systems_lock); 2) register_filesystem\u65f6\u4f7f\u7528\u4e86find_filesystem\u67e5\u627e\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u6ce8\u518c\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u4f46unregister_filesystem\u65f6\u5e76\u6ca1\u6709\u4f7f\u7528find_filesystem\u53bb\u67e5\u627e\u5df2\u7ecf\u6ce8\u518c\u7684\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff0c\u800c\u662f\u76f4\u63a5\u904d\u5386\u3002\u5e94\u8be5\u53ef\u4ee5\u4f7f\u7528find_filesystem\u6539\u5199\u3002\u66f4\u6df1\u5c42\u6b21\uff0c\u56e0\u4e3a\u6ce8\u518c\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fname\u4f5c\u4e3a\u5224\u65ad\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u7684\u552f\u4e00\u6027\uff0c\u90a3\u4e48\u5728\u89e3\u6ce8\u518c\u7684\u65f6\u5019\u4f7f\u7528find_filesystem\u53bb\u67e5\u627e\u662f\u5426\u5df2\u7ecf\u6ce8\u518c\u4e5f\u662f\u552f\u4e00\u7684\uff0c\u903b\u8f91\u4e0a\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u4f46\u662f\u8981\u8003\u8651\u6ce8\u518c\u662f\u5728\u94fe\u8868\u7ed3\u5c3e\u6dfb\u52a0\u5bf9\u8c61\uff0c\u800c\u89e3\u6ce8\u518c\u6709\u53ef\u80fd\u5728\u94fe\u8868\u4e2d\u90e8\uff0c\u4f7f\u7528find_filesystem\u51fd\u6570\u903b\u8f91\u4f1a\u66f4\u590d\u6742\u3002 3) \u5728\u6ce8\u518c\u7684\u65f6\u5019\u4f1a\u5224\u65adnext\u6307\u9488\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u7684\u8bdd\u4f1a\u8fd4\u56de\u5931\u8d25\uff0c\u8fd9\u91cc\u7684\u8003\u8651\u5f88\u91cd\u8981\uff1a\u9632\u6b62\u4e86\u6ce8\u518c\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u7684\u65f6\u5019\u5728\u94fe\u8868\u4e2d\u52a0\u5165\u968f\u610f\u4e0d\u786e\u5b9a\u6027\uff0c\u5373\u4e0d\u786e\u5b9anext\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u7cfb\u7edf\u4e2d\u6ce8\u518c\u7684\u6240\u6709\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u90fd\u662f\u9760\u8fd9\u4e2a\u94fe\u8868\u6765\u7ef4\u62a4\uff0c\u6240\u4ee5next\u7edd\u5bf9\u4e0d\u53ef\u4ee5\u51fa\u95ee\u9898\uff1b\u6240\u4ee5\u89e3\u6ce8\u518c\u4e4b\u540e\uff0c\u4e5f\u4f1a\u5c06next\u6307\u9488\u8d4b\u503c\u4e3aNULL\uff1b 4) unregister_filesystem\u4e4b\u540e\u4f1a\u8c03\u7528synchronize_rcu\uff0c\u8fd9\u4e2arcu\u540c\u6b65\u5728\u8fd9\u4e2a\u5730\u65b9\u663e\u5f97\u975e\u5e38\u7a81\u5140\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f \u8fd8\u662f\u67e5\u770b\u6e90\u7801\u63d0\u4ea4\u8bb0\u5f55\u3002\u6700\u5f00\u59cb\u7684\u63d0\u4ea4\u662fNick Piggin\u572811\u5e74\u572831e6b01f4183ff419a6d1f86177cbf4662347cec\u8fd9\u4e2acommiter\u4e2d\u6dfb\u52a0\u7684\uff0c\u7136\u540e\u572811\u5e74\u7531Milton Milller\u5728fff3e5ade4455a4b42a19c95dd7a167a3cb7956a\u8fd9\u4e2a\u63d0\u4ea4\u4e2d\u5c06synchronize_rcu\u4ece\u5faa\u73af\u5916\u6dfb\u52a0\u5230\u5faa\u73af\u4e2d\u3002\u5177\u4f53\u7684\u539f\u56e0\u5982\u4e0b\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e24\u4e2acommit\u7684\u6ce8\u91ca\uff0c\u7b80\u800c\u8a00\u4e4b\u5982\u4e0b\uff1a 31e6b01f4183ff419a6d1f86177cbf4662347cec: \u5728\u89e3\u6ce8\u518c\u7684\u65f6\u5019\u4ecd\u53ef\u7ee7\u7eed\u8bbf\u95eed_ops\u548ci_ops\uff1b fff3e5ade4455a4b42a19c95dd7a167a3cb7956a: \u5728\u5faa\u73af\u5916\u4e0d\u5b89\u5168\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u5faa\u73af\u5185\u90e8\u3002\u8fd9\u4e2a\u70b9\u8fd8\u4e0d\u61c2\uff0c\u7ed9\u81ea\u5df1\u7559\u4e2a\u4f5c\u4e1a\u5427^_^ struct file_operations","title":"\u76f8\u5173\u6570\u636e\u7ed3\u6784"},{"location":"about/","text":"\u8fd9\u662fBryan\u7684\u6280\u672f\u4e13\u680f","title":"\u5173\u4e8e"},{"location":"link/","text":"\u8bb0\u5f55\u4e00\u4e9b\u6709\u610f\u601d\u7684\u94fe\u63a5 \u6280\u672f\u5927\u505c\u6ede https://zhuanlan.zhihu.com/p/24779185 \u77e5\u4e4e\u4e13\u680f-\u98ce\u4e91\u4e4b\u58f0 \u98ce\u4e91\u5b66\u4f1a\uff0c\u79d1\u5b66\u7d20\u517b\uff0c\u5bb6\u56fd\u60c5\u6000\uff0c\u6a2a\u8de8\u6587\u7406\uff0c\u7eb5\u89c8\u98ce\u4e91 https://zhuanlan.zhihu.com/fengyun","title":"\u79d1\u666e\u601d\u8003"},{"location":"link/#_1","text":"","title":"\u8bb0\u5f55\u4e00\u4e9b\u6709\u610f\u601d\u7684\u94fe\u63a5"},{"location":"link/#_2","text":"https://zhuanlan.zhihu.com/p/24779185","title":"\u6280\u672f\u5927\u505c\u6ede"},{"location":"link/#-","text":"\u98ce\u4e91\u5b66\u4f1a\uff0c\u79d1\u5b66\u7d20\u517b\uff0c\u5bb6\u56fd\u60c5\u6000\uff0c\u6a2a\u8de8\u6587\u7406\uff0c\u7eb5\u89c8\u98ce\u4e91 https://zhuanlan.zhihu.com/fengyun","title":"\u77e5\u4e4e\u4e13\u680f-\u98ce\u4e91\u4e4b\u58f0"}]}